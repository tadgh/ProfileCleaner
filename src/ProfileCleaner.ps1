#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 2cb2f739-307e-423a-9cff-c5783412d1b5
# Source File: ..\Documents\SAPIEN\PowerShell Studio 2012\Projects\Profile Dumper\Profile Dumper.pfproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
AwUAAB+LCAAAAAAABACNVN9vmzAQfp+0/wHxTkigVVaJIG1krfLQrUqivlaOc27dGtsyZhv//Uwx
1AZaVXnxfffdj3x3R7YHLP6AarZIo/zrlyDI7pR4BqxfDWPeg6qo4Pkqi/un9VxTBrttnuBTQtbp
VZQu1xBdJCmKrjAhEb5cf0svVsl5dbrMYku2obbGsZGQL7PYNZ3klTWsGeyBgAKO4RcqYROGwY+a
svMmXIb5QSOla7mQpOpqfRxaIMaiW0T5tVDlgyTEzdXjJhn5dLIbJk6IPchq5aQKClGWiJ9//tPA
W+k24VHVEOYdu1oYulehM7r/Pchix4LwC3oE1TNvgINC7K01S2h7yk0kaTvd1qUEZTI5vnHADg8j
fS06h94iTglUulCAdLsCZmgTbGAXdaVF2fud3O857hjSxCiep6Z+/x68+5ofjt/bBbSvtzjxF9Th
CRjrVzMxCSZgr60vWXYAXCuqmyAe77o37uEAFsv2141owjSKn2usJ+QRPub7E4ln0S1UWFHpaxzP
ombfJOKNK/kYKYRsFH188uYyxXZcg+KIjRqch3+bYGrQVplRwPuu9jaA+224iP+9GRazO4BpSX/l
ze1Kcz2z9c0euR+9/2IqgYIDBQAA#>
#endregion
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.1.21
# Generated On: 8/3/2013 6:24 AM
# Generated By: Gary.Graham
#========================================================================


#region Source: Startup.pfs
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
kggAAB+LCAAAAAAABADFVs2O2jAQvlfqO+QBaJw0BJYqREKhVKuWLdqgdg9cjJmwFo6NbAcUaR++
hoaQQNAitBLKJfPN3+exPePgGYjYgMyHWOPw8yfLCn5LuqQcsxFl8IRTCGONpc7W9jpRATrT7n12
0h+QigoeuvbXAFWBvcVAKUjnjILay0ckD+NcaUjtMeZ4CSlwbQ8yLVKsjXPLKqL0XdvZfS0rypjO
JPQ5ZFpi1rImmYlLfkI+FSvgfc+dJ96D38ELr9MGzw9Qmak58zFH+9oc824X+8TvuD2vDc5D7y36
NvtL+UJs1WxMiRRKJNp++j6djaQp0lbI1Wyzi+45ntubFSteMPYuObsIa4+ETNXdqNZYXEd8KPGW
8uUtlB0v8ZNu4roL38Eevo1ykf8dsqkiQjI6/4DKXlESc8nutoW75Nft3EvK7sbyZfzryuNFJRAt
ZB6D3FACN92Njzlop0waFlCKhwYYTDBZmX4nD+v7ARwMx0I8GpRNdg+iRrQAH0nRbWumddR0WZqA
0pGEfYMN3QCdYaV1lCnTiQ/6SuxLignDOjE9Ivxi4pZCqX7OeDwdhE6Air+jo9iCjF+BscPYMFPk
HCyKherVCmIgmaQ6t9ABqTucjKjjOhrRiRSLjOhz60uKAj/dqiZ0CIpIuq6XGTWikUjXmOfVqp8i
kVjnZiC/1rbmHHvkGqQZ2icEm+HGCf/f4bLKMNtN7jrXChKg2msAVU6/OQvVN8g/c3IOH5IIAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
[void][Reflection.Assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_pff) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pfs

#region Source: MainForm.pff
function Call-MainForm_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
VSAAAB+LCAAAAAAABADNWm1v4jgQ/n7S/Ycon1nIC1BaUaQWyqm6dlst3N5+qFSZZKC+OjFynLac
7sffOC9AICwOpburVm0Zjz3jmSfPjJ12v4DHX0AsBkSS3u+/GUb3TtAZDQkbUgafSQC9W0LDIRdB
fT6ddhtbw8kk9ekriIjysGfXnW5jXZAuO/kHPGnIxRzOzdEikhDU/6ahz1+julo9/VkzyoZqRrbU
ebNuqa+a0Y+ZjAWchxBLQVjNuI8njHp/wmLMnyE8n5yckJbXatunbhOszqlphOjsuZlvxjS8J8p8
gapmn4dScBaZiafo673gcxBykc3pMwqhHNF/wey12m7NaLbsbiNX2jFJxcZcxm6v+kgSIe95RCVu
0+z10SCIkScAwr1zx/AmzR4Kpxh0YxAHOLg96eoF18xm3HDim727UP1W7iVj3UbyK9ffn7DLWEoe
fnjKJomZC8TcAjPwnbxtR+aGeyQNqH1q1wy7ebIVl12ZK1jVmJXCw3baNaOjY2VMJtehD29m71RH
O0mxvjd/RfCVRjFhI7lgcEm85z5nXJi9sYhL56+jA/HuPW9E4DERbkCkkWJEHzE3ZALswwHDlBUE
R8QZ3PDZwZBxaobj6iNmw6w2Zk5wq7YWCJaQ6WhDJvPHKHOoev6+UO9JrXvJ3z4+i3z2KNCeRHsT
/nZwFpGvnZZOeLMsFs1qZ7HlOIpgrEp51CKKJI/L0fcn8YfS9pAKuCERLnpoAl3HPYS5V4b1ydvu
VCbvtnYGlUOGtkfHI/BVII7D4Wh6JiCKLon4cAz5wECh4HE+IeI9DNC0dRKV4qdgtNrz77g6+hLm
6FUlmLU0tBEvdMLQlSFh0TZGfulqPVAxhwvGsi42GgpeLd9D1MB+m3qCR3wqjREJI2MEgk6RPZy5
1AjgCjKOhW1c06lW+sv2oA0fp60LnxUomtrck7pmEMaMeeacMRU8MCYw5QLOjgAWPEDCmAZwjxQD
H88MnPkQyUcfrR7KC0mStej+lryp7Zk9q9OwnIZj2a5hW2ct50yrb7ulYTrdsazWJ8vGb21kre1T
H0uqYjrVOhEd5H0lLE52YbufrM4na/v5+MWbkRE+Bp7EJ/RdzaStn70Ns/qdiGVVZgMdtkrZIPXH
0HPoeI3IMgxHOkvS6MecQ9AOHgTsquVIBERKGs6uQoJV2d8dsO83LhWKUOaoDsqSVKCRW+6rWyoM
Db16k4BI8quB1G5X45mSi7NflTPiOePEf0zB+55LhAqEUbBZIRO2OuRWSoRW2tbpQt3o/iC+KERh
L1sUP+yHz90cQrWZASV42P/4TqVgbtcdc36djhUf9VWH5if6+y+ar0MqUXWAxzxPcrEwe/2zh+9f
/ypjd8+pqZVrj6l4PdLF0F5EEQS4Z4jyRTPJopfF8JaEZAYBTq9fxJIHyUOwiqWtG0vXnkzdTqtN
fLfdBBeRvbRUbvkI+foPw5Zh4GF5jKh/vho/DAVG7ZWL54cXtbprufbpQ7ZjXxXRPc4dHVqHuVp8
CrQcHwjyiiXsEJctd9qankxt229ZxCWHuZzZ3+NsEHlcMDo5QmQ1QkIk+WkpVMb1MvctYD/Ny2+3
N5rwyjkLz+kv1IODno3jAG3Tk5INLD/mBNi9x+qGfCfy/f0BIaCPa7UxVVi+J01rV6k0E1572QvT
gmpRiixLp3gq7AtICFY1VVuypXY/jpCJ8/G1tXcN3DMip8gRyZkw/3s5+iUOR+ML1T5kf63m8VcQ
oydgLH/xq3rXLWFewYvB6o7AiwXFqtbIJcUJGy+ZV9solWL182NPbmvvGsjkm5kqkw4g8gSdF6Pc
KJX2eTAn4WI96JuSPp8vBJ09FTKzLbtW74NDwjYcLBeXvqNPJ+weQs+CVYeV+Rqs91yF9/mNNfAj
Ftb/jeB/TNhJRVUgAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$buttonAnalyze = New-Object 'System.Windows.Forms.Button'
	$labelConsoleLog = New-Object 'System.Windows.Forms.Label'
	$log_richtextbox = New-Object 'System.Windows.Forms.RichTextBox'
	$buttonFireLasers = New-Object 'System.Windows.Forms.Button'
	$deletion_pbar = New-Object 'System.Windows.Forms.ProgressBar'
	$labelDeleteAllProfilesFro = New-Object 'System.Windows.Forms.Label'
	$oldest_date = New-Object 'System.Windows.Forms.DateTimePicker'
	$buttonSelectAll = New-Object 'System.Windows.Forms.Button'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$upload_button = New-Object 'System.Windows.Forms.Button'
	$openFileDialog = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$OnLoadFormEvent={
	#TODO: Initialize Form Controls here
		#define newline for later use
		$nl = [Environment]::NewLine
	}
	
	$upload_button_Click={
		#open the previously defined dialog
		$openFileDialog.ShowDialog()
		
		#add each computer found in the list to the listbox
		$listbox1.BeginUpdate()
		foreach($comp in Get-Content $openFileDialog.FileName) {
			$listbox1.Items.Add($comp)
		}
		$listbox1.EndUpdate()
	}
	
	#region Control Helper Functions
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$buttonSelectAll_Click={
		
		for($i = 0; $i -lt $listbox1.Items.Count; $i++) {
			$listbox1.SetSelected($i, $true)	
		}
	}
	
	$buttonFireLasers_Click={
		[array]$to_be_deleted = $null
		$oldest_allowed_date = $oldest_date.Value
		$profile_count = 0
	
		foreach($computer in $listbox1.SelectedItems){
	
			
			[array]$users = Get-WmiObject -ComputerName $computer Win32_UserProfile -filter "LocalPath Like 'C:\\Users\\%'" -ea stop `
			| where{([WMI] '').ConvertToDateTime($_.LastUseTime) -lt $oldest_allowed_date -and $_.LocalPath -notmatch "Administrator|Public|Default"}
			
			$to_be_deleted += $users
			$profile_count += $users.count
		}
		
		$deletion_pbar.Maximum = $profile_count
		Write-Host "COUNT IS $profile_count"
		
		$deletion_pbar.Visible = $true
		$deletion_pbar.Value = 0
		
		foreach($user in $to_be_deleted){
			$log_richtextbox.AppendText($nl+"Deleting " + $user.LocalPath + "...")
			$log_richtextbox.ScrollToCaret();
			$deletion_pbar.PerformStep()
			($user).Delete()
			
		}
		$log_richtextbox.AppendText($nl + "Deletions Completing...")
		$log_richtextbox.ScrollToCaret();
		$deletion_pbar.Visible = $false
		
	}
	
	$buttonAnalyze_Click={
		#dump old data from textbox for readability
		$log_richtextbox.Clear()
		$oldest_allowed_date = $oldest_date.Value
		
		#iterate through all computers selected, filter out Admin and Public users, that were last modified before some determined date
		foreach($computer in $listbox1.SelectedItems){
			$log_richtextbox.AppendText( $nl + $nl + "Scanning $computer for profiles older than $oldest_allowed_date" + $nl + "__________________________")
		
			[array]$users = Get-WmiObject -ComputerName $computer Win32_UserProfile -filter "LocalPath Like 'C:\\Users\\%'" -ea stop `
			| where{([WMI] '').ConvertToDateTime($_.LastUseTime) -lt $oldest_allowed_date -and $_.LocalPath -notmatch "Administrator|Public|Default"} 
			
			foreach($item in $users){
				$log_richtextbox.AppendText($nl +  ($item.LocalPath).replace('C:\Users\','') + "-----"+ ([WMI] '').ConvertToDateTime($item.LastUseTime))
				$log_richtextbox.ScrollToCaret();
			}
		}
		
	}
	
			#$items = Get-ChildItem \\$computer\C$\Users `
			#| where -Filter {$_.LastWriteTime -le "$oldest_allowed_date" -and $_.Name -ne "Public" -and $_.Name -ne "Administrator"} `
			#| sort LastWriteTime -Descending
	
			#$d = Get-Item -Path $path.FullName -Force
			#$d.Delete($true)
			#Remove-Item $path.FullName -Force -Recurse -ErrorAction SilentlyContinue
	
	$openFileDialog_FileOk=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_log_richtextbox = $log_richtextbox.Text
		$script:MainForm_oldest_date = $oldest_date.Value
		$script:MainForm_listbox1 = $listbox1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAnalyze.remove_Click($buttonAnalyze_Click)
			$buttonFireLasers.remove_Click($buttonFireLasers_Click)
			$buttonSelectAll.remove_Click($buttonSelectAll_Click)
			$upload_button.remove_Click($upload_button_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$openFileDialog.remove_FileOk($openFileDialog_FileOk)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# MainForm
	#
	$MainForm.Controls.Add($buttonAnalyze)
	$MainForm.Controls.Add($labelConsoleLog)
	$MainForm.Controls.Add($log_richtextbox)
	$MainForm.Controls.Add($buttonFireLasers)
	$MainForm.Controls.Add($deletion_pbar)
	$MainForm.Controls.Add($labelDeleteAllProfilesFro)
	$MainForm.Controls.Add($oldest_date)
	$MainForm.Controls.Add($buttonSelectAll)
	$MainForm.Controls.Add($listbox1)
	$MainForm.Controls.Add($upload_button)
	$MainForm.ClientSize = '563, 451'
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Profile Dumper"
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# buttonAnalyze
	#
	$buttonAnalyze.Location = '191, 147'
	$buttonAnalyze.Name = "buttonAnalyze"
	$buttonAnalyze.Size = '126, 87'
	$buttonAnalyze.TabIndex = 9
	$buttonAnalyze.Text = "Analyze"
	$buttonAnalyze.UseVisualStyleBackColor = $True
	$buttonAnalyze.add_Click($buttonAnalyze_Click)
	#
	# labelConsoleLog
	#
	$labelConsoleLog.Location = '12, 237'
	$labelConsoleLog.Name = "labelConsoleLog"
	$labelConsoleLog.Size = '70, 19'
	$labelConsoleLog.TabIndex = 8
	$labelConsoleLog.Text = "Console Log"
	#
	# log_richtextbox
	#
	$log_richtextbox.Location = '13, 259'
	$log_richtextbox.Name = "log_richtextbox"
	$log_richtextbox.Size = '522, 140'
	$log_richtextbox.TabIndex = 7
	$log_richtextbox.Text = ""
	#
	# buttonFireLasers
	#
	$buttonFireLasers.Location = '323, 147'
	$buttonFireLasers.Name = "buttonFireLasers"
	$buttonFireLasers.Size = '118, 87'
	$buttonFireLasers.TabIndex = 6
	$buttonFireLasers.Text = "Fire Lasers"
	$buttonFireLasers.UseVisualStyleBackColor = $True
	$buttonFireLasers.add_Click($buttonFireLasers_Click)
	#
	# deletion_pbar
	#
	$deletion_pbar.Location = '13, 416'
	$deletion_pbar.Name = "deletion_pbar"
	$deletion_pbar.Size = '522, 23'
	$deletion_pbar.Step = 1
	$deletion_pbar.TabIndex = 5
	$deletion_pbar.Visible = $False
	#
	# labelDeleteAllProfilesFro
	#
	$labelDeleteAllProfilesFro.Font = "Microsoft Sans Serif, 12pt"
	$labelDeleteAllProfilesFro.Location = '206, 42'
	$labelDeleteAllProfilesFro.Name = "labelDeleteAllProfilesFro"
	$labelDeleteAllProfilesFro.Size = '262, 23'
	$labelDeleteAllProfilesFro.TabIndex = 4
	$labelDeleteAllProfilesFro.Text = "Delete all profiles from before:"
	#
	# oldest_date
	#
	$oldest_date.Location = '206, 87'
	$oldest_date.MaxDate = "08/02/2013 10:52:19"
	$oldest_date.MinDate = "2005-01-01"
	$oldest_date.Name = "oldest_date"
	$oldest_date.Size = '223, 20'
	$oldest_date.TabIndex = 3
	$oldest_date.Value = "2013-08-02"
	#
	# buttonSelectAll
	#
	$buttonSelectAll.Location = '13, 211'
	$buttonSelectAll.Name = "buttonSelectAll"
	$buttonSelectAll.Size = '100, 23'
	$buttonSelectAll.TabIndex = 2
	$buttonSelectAll.Text = "Select All"
	$buttonSelectAll.UseVisualStyleBackColor = $True
	$buttonSelectAll.add_Click($buttonSelectAll_Click)
	#
	# listbox1
	#
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '13, 42'
	$listbox1.Name = "listbox1"
	$listbox1.SelectionMode = 'MultiExtended'
	$listbox1.Size = '100, 160'
	$listbox1.TabIndex = 1
	#
	# upload_button
	#
	$upload_button.Location = '12, 11'
	$upload_button.Name = "upload_button"
	$upload_button.Size = '101, 25'
	$upload_button.TabIndex = 0
	$upload_button.Text = "Select File"
	$upload_button.UseVisualStyleBackColor = $True
	$upload_button.add_Click($upload_button_Click)
	#
	# openFileDialog
	#
	$openFileDialog.FileName = "openfiledialog1"
	$openFileDialog.InitialDirectory = "C:\"
	$openFileDialog.add_FileOk($openFileDialog_FileOk)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.pff

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
